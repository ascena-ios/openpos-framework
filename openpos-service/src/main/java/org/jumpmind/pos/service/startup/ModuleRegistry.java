package org.jumpmind.pos.service.startup;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.annotation.PostConstruct;

import org.apache.commons.lang3.StringUtils;
import org.jumpmind.pos.service.IModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class ModuleRegistry {

    final Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired(required = false)
    List<IModule> modules;

    public ModuleRegistry() {
        logger.info("Creating module registry");
    }

    @PostConstruct
    public void loadModuleDatabaseDefaults() {

        final long MAX_H2_SERVER_PROPERTIES_SIZE = 1024*1024;
        if (this.modules != null) {
            File file = new File(System.getProperty("java.io.tmpdir"), ".h2.server.properties");
            file.getParentFile().mkdirs();
            Properties properties = new Properties();
            try {
                if (file.exists()) {
                    if (file.length() > MAX_H2_SERVER_PROPERTIES_SIZE) {
                        logger.warn(".h2.server.properties has gotten too large, resetting it. (" + file.length() + " bytes)");
                    } else {
                        try (InputStream is = new FileInputStream(file)) {
                            properties.load(is);
                        }
                    }
                }
                if (!properties.containsKey("commandHistory")) {
                    properties.setProperty("commandHistory", "");
                }
                properties.setProperty("webAllowOthers", "false");
                int pos = 0;
                for (IModule module : modules) {
                    properties.setProperty(Integer.toString(pos), StringUtils.capitalize(module.getName()) + "|" + module.getDriver() + "|"
                            + module.getURL().replace("jdbc:openpos:", "jdbc:") + "|\n");
                    pos++;
                }
                try (BufferedWriter out = new BufferedWriter(new FileWriter(file))) {
                    properties.store(out, "generated by JumpMind Commerce " + new Date());
                }
            } catch (IOException ex) {
                logger.warn("Unable to configure \".h2.server.properties\" file", ex);
            }
        }

    }

    public List<IModule> getModules() {
        return modules;
    }

}
