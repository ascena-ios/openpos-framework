import java.text.SimpleDateFormat

group = 'org.jumpmind.pos'

apply plugin: 'eclipse'
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

def removeSnapshot = { v ->
    if (v.endsWith('-SNAPSHOT')) {
        v = v.substring(0, v.length() - '-SNAPSHOT'.length())
    }
    return v;
}

sourceCompatibility=1.8
targetCompatibility=1.8

/*
quality {
   strict = false
   consoleReporting = false
}
*/

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Xlint:none']
}

ext {
    jnaVersion = '4.1.0'
    springfoxSwaggerVersion='2.9.2'
    javaposVersion='1.14.2'
    jacksonVersion='2.8.10'
    lombokVersion='1.18.20'
    snakeYamlVersion='1.23'
}

// update jar files with version information
processResources {
    if (project.hasProperty('releaseBuildEnabled') && project.getProperty('releaseBuildEnabled').toBoolean()) {
        version = removeSnapshot(version)
    }
    eachFile { details ->
        if (details.name.endsWith('version.properties')) {
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'version': version,
                    'buildTime': new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').format(new java.util.Date()),
                    'gitBranch' : gitBranch,
                    'gitHash' : gitHash,
                    'buildNumber' : buildNumber,
                    'buildName' : buildName
                ])
        }
    }
}


repositories { 
    maven { url symmetricMavenUrl }
    mavenCentral()
    google()
    maven { url 'https://jitpack.io' }
}

jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": project.hasProperty('version') && project.getProperty('version') ? project.getProperty('version') : '0.0',
                "Project-Artifact": project.name,
                "Build-Version": project.hasProperty('version') && project.getProperty('version') ? project.getProperty('version') : '0.0',
                "Build-Time": new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date()),
                "Build-Name": buildName,
                "Build-Number": buildNumber,
                "Git-Hash": gitHash,
                "Git-Branch": gitBranch)
    }
}

idea {
    module {
        testResourceDirs = []
        testSourceDirs = [ file('src/test/java'), file('src/test/groovy')]
        resourceDirs += file('src/test/resources')
        excludeDirs += file('bin')
        excludeDirs += file('build')
        excludeDirs += file('dist')
        excludeDirs += file('node_modules')
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }

    project {
        resourceFilter {
            appliesTo = 'FILES_AND_FOLDERS'
            type = 'EXCLUDE_ALL'
            matcher {
                id = 'org.eclipse.ui.ide.orFilterMatcher'
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-name-matches-false-false-*.class'
                }
                matcher {
                    id = 'org.eclipse.ui.ide.multiFilter'
                    arguments = '1.0-name-matches-false-false-node_modules'
                }
            }
        }        
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/code-coverage")
    }
}

test {
    jvmArgs '-XX:+CrashOnOutOfMemoryError', '-Dfile.encoding=utf-8'
    maxHeapSize = '2048m'
    if (project.hasProperty('ignoreFailures')) {
       ignoreFailures = project.property('ignoreFailures').toBoolean()
    }
    testLogging.showStandardStreams = true
    //Dynamic exclude through property defined in the build.gradle file
    if (project.hasProperty('excludeTests')) {
        println('Excluding tests: ' + project.property('excludeTests'))
        exclude project.property('excludeTests')
    }
    finalizedBy jacocoTestReport
}

task testJar(type: Jar) {
    classifier "test"
    from  sourceSets.test.output+sourceSets.test.allSource
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// example usage:
// commerce-assemble$ ./gradlew commerce-context:patchJar -PpatchClasses=SqlPurgeJob,CustomerGroupModel
task patchJar(type: Jar, dependsOn:classes) {
    includeEmptyDirs = false
    outputs.upToDateWhen { false }

    if (!project.hasProperty('patchClasses')) {
        project.ext.patchClasses = ''
    }

    def classNames = project.patchClasses.split(",");
    ext.patchClassFiles = classNames.collect{className -> ["**/${className}.class", "**/${className}\$*.class"]}.flatten()
    ext.patchSourceFiles = classNames.collect{className -> "**/${className}.java"}
    ext.fileFoundForPatch = false

    doFirst {
        if (project.patchClasses.length() == 0) {
            throw new InvalidUserDataException("patchClasses property not found. Please specify one or more patch classes with a -P properties, such as -PpatchClasses=SqlPurgeJob,SomeOtherClass");
        }

        if (!project.hasProperty("patchName")) {
            ext.patchName = 'patch.jar'
        }   
        patchJar.archiveName = ext.patchName;
    }

    from(sourceSets.main.allSource) {
        for (sourceFileName in ext.patchSourceFiles) {
              include sourceFileName;
        }        
    }
    from(sourceSets.main.output.classesDirs ) {
        for (className in ext.patchClassFiles) {
              include className;
        }
    }        

    eachFile { file ->
        ext.fileFoundForPatch = true
        println "** Including file in patch: " + file;
    }

    doLast {
        if (!ext.fileFoundForPatch) {
            throw new InvalidUserDataException("No files were found for patchClasses argument: ${project.patchClasses}");
        }
        println "Patch jar written to ${patchJar.archiveName}";
    }
}

task extraClean {
    doFirst {
        println 'Removing bin and .settings directories'
        delete './bin'
        delete '.settings'
    }
}

task develop {
    description 'Generates Eclipse artifacts and sets up your development environment'
    dependsOn tasks.cleanEclipse, tasks.eclipse, tasks.cleanIdea, tasks.idea

}

dependencies {
    implementation group: 'org.yaml', name: 'snakeyaml', version: snakeYamlVersion
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}

tasks.uploadArchives.dependsOn build
clean.dependsOn extraClean
